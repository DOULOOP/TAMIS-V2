generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(USER)
  department  String?
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations for monitoring system
  incidents   Incident[]
  assignedIncidents Incident[] @relation("AssignedIncidents")
  reports     Report[]
  
  @@map("users")
}

model Incident {
  id          String        @id @default(cuid())
  title       String
  description String
  severity    SeverityLevel
  status      IncidentStatus @default(OPEN)
  location    String
  coordinates String? // JSON string for lat/lng
  reportedBy  String
  assignedTo  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?
  
  user        User    @relation(fields: [reportedBy], references: [id])
  assignee    User?   @relation("AssignedIncidents", fields: [assignedTo], references: [id])
  reports     Report[]
  
  @@map("incidents")
}

model Report {
  id          String   @id @default(cuid())
  incidentId  String
  content     String
  attachments String[] // Array of file URLs
  reportedBy  String
  createdAt   DateTime @default(now())
  
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [reportedBy], references: [id])
  
  @@map("reports")
}

enum UserRole {
  ADMIN
  SUPERVISOR
  ENGINEER
  USER
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

/// Safe Zones stored from safe-zone.json
model SafeZone {
  id                String   @id
  name              String
  type              String
  lat               Float
  lng               Float
  address           String?
  capacity          Int
  currentOccupancy  Int
  status            String
  lastUpdated       DateTime?
  facilities        Json?
  accessRoutes      Json?
  emergencyServices Json?
  evacuationPlan    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("safe_zones")
}

/// Population Zones stored from population-density.json
model PopulationZone {
  zoneId      String   @id
  name        String
  lat         Float
  lng         Float
  bounds      Json?
  population  Int
  area        Float
  density     Int
  riskLevel   String
  demographics Json?
  facilities   Json?
  lastUpdated  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("population_zones")
}

/// Communication modem stations stored from communication-network.json
model ModemStation {
  id               String  @id
  name             String
  type             String
  lat              Float
  lng              Float
  address          String?
  elevation        Int?
  status           String
  signalStrength   Int
  dataRate         Float
  uptime           Float?
  lastPing         DateTime?
  batteryLevel     Int?
  powerSource      String?
  backupPower      String?
  coverageRadius   Float?
  connectedDevices Int?
  networkLoad      Int?
  frequency        String?
  bandwidth        String?
  technology       String?
  manufacturer     String?
  model            String?
  firmware         String?
  installDate      DateTime?
  lastMaintenance  DateTime?
  operatingTemp    Int?
  humidity         Int?
  alerts           Json[]

  linksFrom NetworkLink[] @relation("fromStation")
  linksTo   NetworkLink[] @relation("toStation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("modem_stations")
}

model NetworkLink {
  id       String @id @default(cuid())
  fromId   String
  toId     String
  linkType String
  bandwidth String?
  latency  Int?
  status   String?

  from ModemStation @relation("fromStation", fields: [fromId], references: [id])
  to   ModemStation @relation("toStation", fields: [toId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("network_links")
}

/// Field Units stored from field-units.json
model FieldUnit {
  id            String @id
  name          String
  location      String?
  lat           Float
  lng           Float
  status        String
  lastReport    String?
  dataCount     Int?
  areasCovered  Json?
  batteryLevel  Int?
  signalStrength Int?
  teamLeader    String?
  establishedTime String?
  missionType   String?
  personnel     Json?
  equipment     Json?
  communications Json?
  vehicle       Json?
  dataCollection Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("field_units")
}

model AreaData {
  areaId         String @id
  areaName       String
  coordinates    String
  currentOccupancy Int
  maxCapacity    Int
  lastUpdated    String?
  reportingUnits Json?
  dataPoints     Int?
  status         String?
  areaType       String?
  facilityDetails Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("area_data")
}

/// Aid routes stored from aid-route.json
model AidRoute {
  id              String @id
  name            String
  type            String
  status          String
  priority        String?
  startPoint      Json?
  endPoint        Json?
  waypoints       Json?
  distance        Float?
  estimatedTime   Int?
  currentSpeed    Int?
  trafficCondition String?
  roadCondition   String?
  weatherImpact   String?
  supplies        Json?
  vehicles        Json?
  checkpoints     Json?
  blockageReason  String?
  estimatedClearTime String?
  alternativeRoute String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("aid_routes")
}

/// Safe zones fetched from Google Places API
model GoogleSafeZone {
  /// Google place id
  placeId              String   @id
  /// Display name text
  name                 String
  /// Primary type display name (text)
  primaryType          String?
  /// All place types
  types                String[]
  formattedAddress     String?
  shortFormattedAddress String?
  lat                  Float
  lng                  Float
  directionsUri        String?
  placeUri             String?
  reviewsUri           String?
  photosUri            String?
  writeAReviewUri      String?
  /// Full raw record for flexibility
  raw                  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("google_safe_zones")
}
